{"version":3,"file":"server.js","sources":["webpack:///webpack/bootstrap","webpack:///./APIs/Controllers/ErrorController.js","webpack:///./APIs/Controllers/authController.js","webpack:///./APIs/Controllers/mlControllers.js","webpack:///./APIs/Controllers/studentController.js","webpack:///./APIs/Model/StudentModel.js","webpack:///./APIs/Routers/studentRouter.js","webpack:///./APIs/utils/appError.js","webpack:///./APIs/utils/catchErr.js","webpack:///./APIs/utils/email.js","webpack:///./React/Server/index.js","webpack:///./React/Shared/Components/App.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Activity.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Content.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Definitions.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Overview.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Summary.js","webpack:///./React/Shared/Components/Course/GeneralMaterials/Visual.js","webpack:///./React/Shared/Components/Course/Home.js","webpack:///./React/Shared/Components/Course/LS/LS.js","webpack:///./React/Shared/Components/Course/LSMaterials/AcivityVerbal.js","webpack:///./React/Shared/Components/Course/LSMaterials/ActivityVisual.js","webpack:///./React/Shared/Components/Course/LSMaterials/ContentVerbalDetailed.js","webpack:///./React/Shared/Components/Course/LSMaterials/ContentVerbalOverview.js","webpack:///./React/Shared/Components/Course/LSMaterials/ContentVisualDetailed.js","webpack:///./React/Shared/Components/Course/LSMaterials/ContentVisualOverview.js","webpack:///./React/Shared/Components/Course/LSMaterials/DefinitionVerbalDetailed.js","webpack:///./React/Shared/Components/Course/LSMaterials/DefinitionVerbalOverview.js","webpack:///./React/Shared/Components/Course/LSMaterials/DefinitionVisualDetailed.js","webpack:///./React/Shared/Components/Course/LSMaterials/DefinitionVisualOverview.js","webpack:///./React/Shared/Components/Course/LSMaterials/OverviewVerbal.js","webpack:///./React/Shared/Components/Course/LSMaterials/OverviewVisual.js","webpack:///./React/Shared/Components/Course/LSMaterials/SummaryVerbal.js","webpack:///./React/Shared/Components/Course/LSMaterials/SummaryVisual.js","webpack:///./React/Shared/Components/Course/Page.js","webpack:///./React/Shared/Components/Login.js","webpack:///./React/Shared/Components/Signup.js","webpack:///./React/Shared/Components/theme.js","webpack:///./React/Shared/Data/categories.js","webpack:///./React/Shared/Data/courses.js","webpack:///./React/Shared/Data/learningStyles.js","webpack:///./React/Shared/Data/routes.js","webpack:///./app.js","webpack:///./knn/knn.js","webpack:///./server.js","webpack:///external \"@material-ui/core\"","webpack:///external \"@material-ui/core/Container\"","webpack:///external \"@material-ui/core/colors\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"@material-ui/icons/ArrowForwardIosRounded\"","webpack:///external \"@material-ui/icons/CheckCircleSharp\"","webpack:///external \"@material-ui/icons/KeyboardArrowRightOutlined\"","webpack:///external \"@material-ui/icons/LockOutlined\"","webpack:///external \"axios\"","webpack:///external \"bcrypt\"","webpack:///external \"cors\"","webpack:///external \"crypto\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"fs\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"ml-knn\"","webpack:///external \"mongoose\"","webpack:///external \"morgan\"","webpack:///external \"nodemailer\"","webpack:///external \"path\"","webpack:///external \"react\"","webpack:///external \"react-dom/server\"","webpack:///external \"react-router-dom\"","webpack:///external \"serialize-javascript\"","webpack:///external \"util\"","webpack:///external \"validator\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./server.js\");\n","module.exports = (err, req, res, next) => {\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || \"fail\";\n\n  res.status(err.statusCode).json({\n    status: err.status,\n    message: err.message\n  });\n};\n","const Student = require(\"../Model/StudentModel\");\nconst jwt = require(\"jsonwebtoken\");\nconst { promisify } = require(\"util\");\nconst AppErr = require(\"../utils/appError\");\nconst catchAsync = require(\"../utils/catchErr\");\nconst sendEmail = require(\"../utils/email\");\nconst crypto = require(\"crypto\");\n\nconst singleToken = id => {\n  return jwt.sign({ id }, process.env.SEC_STR, {\n    expiresIn: process.env.TIME_DUR\n  });\n};\n\nconst createSendToken = (student, statusCode, res, str) => {\n  const token = singleToken(student._id);\n  const cookieOption = {\n    expires: new Date(\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\n    ),\n\n    httpOnly: true\n  };\n\n  if (process.env.NODE_ENV === \"production\") cookieOption.secure = true;\n\n  res.cookie(\"jwt\", token, cookieOption);\n\n  //remove the password from the output\n  student.password = undefined;\n\n  res.status(statusCode).json({\n    status: str,\n    token,\n    data: {\n      student\n    }\n  });\n};\n\nexports.signup = catchAsync(async (req, res) => {\n  const newStudent = await Student.create(req.body);\n\n  createSendToken(newStudent, 201, res, \"sign up success !!\");\n});\n\nexports.login = catchAsync(async (req, res, next) => {\n  const { studentId, password } = req.body;\n\n  //1) checking the user and pass is provied or not\n  if (!studentId || !password)\n    return next(new AppErr(\"Enter the Email/password\", 400));\n  //2) checking the pass from DB\n  const student = await Student.findOne({ studentId }).select(\"+password\");\n\n  if (!student || !(await student.checkPassword(password, student.password))) {\n    return next(new AppErr(\"Incorrect the Email/password\", 400));\n  }\n\n  //3)Issue the Token\n  createSendToken(student, 201, res, \"Login success !!\");\n});\n\nexports.protect = catchAsync(async (req, res, next) => {\n  let token;\n\n  if (\n    req.headers.authorization &&\n    req.headers.authorization.startsWith(\"Bearer\")\n  ) {\n    //console.log(req.headers.authorization, \"protect\");\n    token = req.headers.authorization.split(\" \")[1];\n  }\n\n  //1) check the token\n  if (!token) {\n    return next(new AppErr(\"You must login first ..\", 403));\n  }\n\n  //2)verification token\n  const decoded = await promisify(jwt.verify)(token, process.env.SEC_STR);\n\n  //3)check if the user still exist\n  const curStudent = await Student.findById(decoded.id);\n\n  if (!curStudent) {\n    return next(new AppErr(\"Student have been deleted\", 404));\n  }\n\n  //4)Check if the user change password after the token was issused\n  if (curStudent.changePasswordAfter(decoded.iat)) {\n    return next(new AppErr(\"Student recently changed  the password \", 400));\n  }\n\n  //grant access\n  req.student = curStudent;\n  console.log(req.student);\n  next();\n});\n\nexports.passwordForget = catchAsync(async (req, res, next) => {\n  //1)Get student based on student ID\n  const student = await Student.findOne({ studentId: req.body.studentId });\n\n  if (!student)\n    return next(new AppErr(\"No such student found by this ID\", 404));\n\n  const resetToken = student.generateResetToken();\n  console.log(resetToken); //Logs the restToken\n  //2) saveing the reset Token to DB\n  await student.save({ validateBeforeSave: false });\n\n  const reset = `${req.protocol}://${req.get(\n    \"host\"\n  )}/api/v1/student/resetPassword/${resetToken}`;\n\n  const message = `Forget Your password ? just click the following link  to  change it ${reset}.\\nif you remember ignore it`;\n\n  //3)Mail Sending function\n  try {\n    await sendEmail({\n      studentId: student.studentId,\n      subject: \"your password reset link vaild for 10 min\",\n      message\n    });\n\n    res.status(200).json({\n      status: \"success\",\n      message: \"token sent to email\"\n    });\n  } catch (err) {\n    student.passwordResetToken = undefined;\n    student.passwordResetExpires = undefined;\n\n    await student.save({ validateBeforeSave: false });\n\n    return next(new AppErr(\"there was a error in mail\", 500));\n  }\n});\n\nexports.resetPassword = catchAsync(async (req, res, next) => {\n  //1) encrypting the token\n  const hashedToken = crypto\n    .createHash(\"sha256\")\n    .update(req.params.token)\n    .digest(\"hex\");\n\n  //2)finding the user relavent to the token\n  const student = await Student.findOne({\n    passwordResetToken: hashedToken,\n    passwordResetExpires: { $gt: Date.now() }\n  });\n  //3) if token expired or user not found.\n  if (!student) {\n    return next(new AppErr(\"Token is invalid or expired\", 400));\n  }\n\n  //4)update change at property for the user\n  console.log(req.body.password, req.body.passwordConfirm);\n  student.password = req.body.password;\n  student.passwordConfirm = req.body.passwordConfirm;\n  student.passwordResetExpires = undefined;\n  student.passwordResetToken = undefined;\n  student.passwordChangeAt = Date.now() - 1000;\n  await student.save();\n\n  //5) log the student in ..\n  createSendToken(student, 200, res, \"Login success !!\");\n});\n\nexports.updatePassword = catchAsync(async (req, res, next) => {\n  //1) Get the user from the collection\n\n  const student = await Student.findById(req.student._id).select(\"+password\");\n\n  console.log(req.body.password, student.password);\n  //2)Check if posted current password is correct\n  if (\n    !(await student.checkPassword(req.body.passwordCurrent, student.password))\n  ) {\n    return next(new AppErr(\"Your Current password is wrong\", 401));\n  }\n\n  //3)if so, update password\n  student.password = req.body.password;\n  student.passwordConfrim = req.body.passwordConfrim;\n  console.log(\"sas\");\n  await student.save();\n\n  createSendToken(student, 200, res, \"Password updated !!\");\n});\n","const Student = require(\"../Model/StudentModel\");\nconst catchAsync = require(\"../utils/catchErr\");\nconst knn = require(\"../../knn/knn\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nexports.post = catchAsync(async (req, res) => {\n  const student = await Student.findById(req.params.id);\n  console.log(req.body);\n\n  // const body = {\n  //   ABC: \"4\",\n  //   D: \"3\",\n  //   C: \"5\",\n  //   AAC: \"6\",\n  //   A: \"1\",\n  //   V: \"1\",\n  //   ABC_T: \"5\",\n  //   D_T: \"1\",\n  //   C_T: \"1\",\n  //   AAC_T: \"5\",\n  //   A_T: \"1\"\n  // };\n\n  student.mlData = {\n    ...student.mlData,\n    ...req.body\n  };\n\n  await student.save({ validateBeforeSave: false });\n  res.status(200).json({\n    message: \"Ml Data posted !\",\n    data: {\n      student\n    }\n  });\n});\n\nexports.getData = catchAsync(async (req, res) => {\n  const student = await Student.findById(req.params.id);\n\n  const mlData = Object.values(student.mlData).slice(1);\n\n  console.log(mlData);\n\n  let learningStyle = knn.getType(mlData);\n\n  res.status(200).json(learningStyle);\n});\n","const Student = require(\"../Model/StudentModel\");\n\nexports.getAll = async (req, res) => {\n  const allStudents = await Student.find();\n\n  res.status(200).json({\n    message: \"Success!\",\n    data: { allStudents }\n  });\n};\n","const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\nconst crypto = require(\"crypto\");\n\nconst studentSchema = mongoose.Schema({\n  name: {\n    type: String\n  },\n  class: {\n    type: Number,\n    min: 5,\n    max: 9\n  },\n  studentId: {\n    type: String,\n    validate: [validator.isEmail, \"Enter valid ID\"],\n    lowercase: true,\n    unique: true,\n    required: [true, \"say your student ID\"]\n  },\n  photo: String,\n  password: {\n    type: String,\n    minlength: 6,\n    required: [true, \"password\"],\n    select: false\n  },\n  passwordConfrim: {\n    type: String,\n    required: [true, \"Enter Confrim Password \"],\n    validate: {\n      validator: function(el) {\n        return el === this.password;\n      },\n      message: \"password not match !\"\n    }\n  },\n  passwordChangeAt: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  active: {\n    type: Boolean,\n    default: true,\n    select: false\n  },\n  mlData: {\n    ABC: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    D: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    C: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    AAC: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    A: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    V: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    ABC_T: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    D_T: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    C_T: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    AAC_T: {\n      type: Number,\n      min: 0,\n      max: 9\n    },\n    A_T: {\n      type: Number,\n      min: 0,\n      max: 9\n    }\n  }\n});\n\nstudentSchema.pre(\"save\", async function(next) {\n  if (!this.isModified(\"password\")) return next();\n  this.password = await bcrypt.hash(this.password, 12);\n  this.passwordConfirm = undefined;\n  next();\n});\n\n//method to check the password from the datebase\nstudentSchema.methods.checkPassword = async function(\n  Enteredpassword,\n  DBpassword\n) {\n  return await bcrypt.compare(Enteredpassword, DBpassword);\n};\n\n//method for protect middleware\nstudentSchema.methods.changePasswordAfter = function(JWTtimestamp) {\n  if (this.passwordChangeAt) {\n    const changedTimeStamp = parseInt(\n      this.passwordChangeAt.getTime() / 1000,\n      10\n    );\n    return changedTimeStamp > JWTtimestamp;\n  }\n};\n\nstudentSchema.methods.generateResetToken = function() {\n  //1)generate Random String\n  const resetToken = crypto.randomBytes(32).toString(\"hex\");\n  //2)Encrypting the random String and saveing to DB\n  this.passwordResetToken = crypto\n    .createHash(\"sha256\")\n    .update(resetToken)\n    .digest(\"hex\");\n  //3)Setting password resetToken expire time\n  this.passwordResetExpires = Date.now() + 600000; // 10 Mins\n  //4)Sending non encrpted token  to user\n  return resetToken;\n};\n\nconst Student = mongoose.model(\"Student\", studentSchema);\n\nmodule.exports = Student;\n","const express = require(\"express\");\nconst router = express.Router();\nconst authController = require(\"../Controllers/authController\");\nconst studentController = require(\"../Controllers/studentController\");\nconst mlController = require(\"../Controllers/mlControllers\");\n\nrouter.route(\"/signup\").post(authController.signup);\nrouter.route(\"/login\").post(authController.login);\nrouter.route(\"/forgetPassword\").post(authController.passwordForget);\nrouter.route(\"/resetPassword/:token\").post(authController.resetPassword);\nrouter\n  .route(\"/updatePassword\")\n  .post(authController.protect, authController.updatePassword);\nrouter.route(\"/getAll\").get(authController.protect, studentController.getAll);\n\nrouter.route(\"/ml/post/:id\").patch(mlController.post);\nrouter.route(\"/ml/get/:id\").get(mlController.getData);\n\nmodule.exports = router;\n","class AppError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n\n    this.statusCode = statusCode;\n    this.status = `${statusCode}`.startsWith(\"4\") ? \"fail\" : \"error\";\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nmodule.exports = AppError;\n","module.exports = fn => {\n  return (req, res, next) => {\n    fn(req, res, next).catch(next);\n  };\n};\n","const nodemailer = require(\"nodemailer\");\n\nconst sendEmail = async option => {\n  console.log(option);\n  //1) create a transfer\n  const transporter = nodemailer.createTransport({\n    host: process.env.MAIL_HOST,\n    port: process.env.MAIL_PORT,\n    auth: {\n      user: process.env.MAIL_USER,\n      pass: process.env.MAIL_PASS\n    }\n    //Active in gmail\n  });\n\n  //2) Define the email option\n  const mailOption = {\n    from: \"Siva prakash  <admin@chillstudies.com>\",\n    to: option.studentId,\n    subject: option.subject,\n    text: option.message\n  };\n\n  //3)Actually send the email\n\n  await transporter.sendMail(mailOption);\n};\n\nmodule.exports = sendEmail;\n","import express from \"express\";\nimport {\n  ServerStyleSheets,\n  ThemeProvider,\n  CssBaseline\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport App from \"../Shared/Components/App\";\nimport theme from \"../Shared/Components/theme\";\nimport { StaticRouter, matchPath } from \"react-router-dom\";\nimport serialize from \"serialize-javascript\";\nimport routes from \"../Shared/Data/routes\";\n\nconst router = express.Router();\n\nrouter.use(express.static(\"dist\"));\n\nrouter.route(\"*\").get((req, res, next) => {\n  const sheets = new ServerStyleSheets();\n\n  const activeRoute = routes.find(route => matchPath(req.url, route));\n\n  const context = { ...activeRoute };\n\n  const markup = renderToString(\n    sheets.collect(\n      <StaticRouter context={context} location={req.url}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <App />\n        </ThemeProvider>\n      </StaticRouter>\n    )\n  );\n\n  const css = sheets.toString();\n\n  res.writeHead(200, { \"Content-Type\": \"text/html\" });\n  res\n    .end(\n      `<!DOCTYPE html>\n      <html lang='en'>\n        <head>\n          <title>ChillStudies</title>\n          <style id='jss-server-side'>${css}</style>\n          <meta name='viewport' content='minimum-scale=1, initial-scale=1, width=device-width' />\n          <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap' />\n          <script>window.__initialData__ = ${serialize(\n            JSON.stringify(activeRoute)\n          )}</script>\n        </head>\n        <body>\n          <div id='root'>${markup}</div>\n          <script src=\"/client.js\" async></script>\n        </body>\n      </html>\n    `\n    )\n    .catch(next);\n});\n\nexport default router;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport routes from \"../Data/routes\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          {routes.map((route, i) => (\n            <Route key={i + 1} {...route} />\n          ))}\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport courses from \"../../../Data/courses\";\nimport {\n  Typography,\n  makeStyles,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  Divider,\n} from \"@material-ui/core\";\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime) => {\n  e.preventDefault();\n  const q1 = document.getElementById(\"q1\").value.toLowerCase(),\n    q2 = document.getElementById(\"q2\").value.toLowerCase(),\n    q3 = document.getElementById(\"q3\").value.toLowerCase(),\n    q4 = document.getElementById(\"q4\").value.toLowerCase(),\n    q5 = document.getElementById(\"q5\").value.toLowerCase();\n\n  let score = 0;\n\n  if (q1.includes(\"java virtual machine\")) score++;\n  if (q2.includes(\"import\")) score++;\n  if (q3.includes(\"3\")) score++;\n  if (q4.includes(\"java runtime environment\")) score++;\n  if (q5.includes(\"java development kit\")) score++;\n\n  score *= 2;\n  let time = Math.round((Date.now() - startTime) / 1000 / 60);\n  time = time >= 9 ? 9 : time;\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        A: score,\n        A_T: time * 3\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n  props.history.push(\"/course/\" + props.match.params.course + \"/Content\");\n};\n\nexport default function Activity(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              Lets see if you can find the abbreviation for JVM\n            </Typography>\n          </ListItem>\n          <ListItem>\n            {\" \"}\n            <TextField id=\"q1\" label=\"Answer\" />{\" \"}\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              Can you find the keyword used to include java packages ?\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q2\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              what could be the value of 'a++' if 'a=2' ?\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q3\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              Lets see if you can find the abbreviation for JRE\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q4\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              Lets see if you can find the abbreviation for JDK\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q5\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <Divider variant=\"middle\" />\n      </List>\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props, startTime);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider\n} from \"@material-ui/core\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime) => {\n  e.preventDefault();\n  let time = Math.round((Date.now() - startTime) / 1000 / 60);\n  let score = time;\n  time = time >= 9 ? 9 : time;\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        C: score,\n        C_T: time * 3\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n  props.history.push(\"/course/\" + props.match.params.course + \"/Visual\");\n};\n\nexport default function Content(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            This article is about a programming language. For the software\n            platform, see Java (software platform). For the software package\n            downloaded from java.com, see Java Platform, Standard Edition. For\n            other uses, see Java (disambiguation). Not to be confused with\n            JavaScript.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java is a general - purpose programming language that is class -\n            based, object - oriented, and designed to have as few implementation\n            dependencies as possible.It is intended to let application\n            developers write once, run anywhere(WORA), [15] meaning that\n            compiled Java code can run on all platforms that support Java\n            without the need for recompilation. [16] Java applications are\n            typically compiled to bytecode that can run on any Java virtual\n            machine(JVM) regardless of the underlying computer architecture.The\n            syntax of Java is similar to C and C++, but it has fewer low - level\n            facilities than either of them.As of 2019, Java was one of the most\n            popular programming languages in use according to GitHub, [17][18]\n            particularly for client - server web applications, with a reported 9\n            million developers. [19]\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java was originally developed by James Gosling at Sun\n            Microsystems(which has since been acquired by Oracle) and released\n            in 1995 as a core component of Sun Microsystems ' Java platform. The\n            original and reference implementation Java compilers, virtual\n            machines, and class libraries were originally released by Sun under\n            proprietary licenses. As of May 2007, in compliance with the\n            specifications of the Java Community Process, Sun had relicensed\n            most of its Java technologies under the GNU General Public License.\n            Meanwhile, others have developed alternative implementations of\n            these Sun technologies, such as the GNU Compiler for Java (bytecode\n            compiler), GNU Classpath (standard libraries), and IcedTea-Web\n            (browser plugin for applets).\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            The latest versions are Java 13, released in September 2019, and\n            Java 11, a currently supported long-term support (LTS) version,\n            released on September 25, 2018; Oracle released for the legacy Java\n            8 LTS the last free public update in January 2019 for commercial\n            use, while it will otherwise still support Java 8 with public\n            updates for personal use up to at least December 2020. Oracle (and\n            others) highly recommend uninstalling older versions of Java because\n            of serious risks due to unresolved security issues.[20] Since Java 9\n            (and 10 and 12) is no longer supported, Oracle advises its users to\n            immediately transition to the latest version (currently Java 13) or\n            an LTS release.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h2\">History</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            James Gosling, Mike Sheridan, and Patrick Naughton initiated the\n            Java language project in June 1991.[21] Java was originally designed\n            for interactive television, but it was too advanced for the digital\n            cable television industry at the time.[22] The language was\n            initially called Oak after an oak tree that stood outside Gosling's\n            office. Later the project went by the name Green and was finally\n            renamed Java, from Java coffee, the coffee from Indonesia.[23]\n            Gosling designed Java with a C/C++-style syntax that system and\n            application programmers would find familiar.[24]\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Sun Microsystems released the first public implementation as Java\n            1.0 in 1996.[25] It promised Write Once, Run Anywhere (WORA)\n            functionality, providing no-cost run-times on popular platforms.\n            Fairly secure and featuring configurable security, it allowed\n            network- and file-access restrictions. Major web browsers soon\n            incorporated the ability to run Java applets within web pages, and\n            Java quickly became popular. The Java 1.0 compiler was re-written in\n            Java by Arthur van Hoff to comply strictly with the Java 1.0\n            language specification.[26] With the advent of Java 2 (released\n            initially as J2SE 1.2 in December 1998 – 1999), new versions had\n            multiple configurations built for different types of platforms. J2EE\n            included technologies and APIs for enterprise applications typically\n            run in server environments, while J2ME featured APIs optimized for\n            mobile applications. The desktop version was renamed J2SE. In 2006,\n            for marketing purposes, Sun renamed new J2 versions as Java EE, Java\n            ME, and Java SE, respectively.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h2\">Principles</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            1.It must be robust and secure.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            2.It must be architecture-neutral and portable.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            3.It must execute with high performance.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            4.It must be interpreted, threaded, and dynamic.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h2\">Versions</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            *JDK 1.0 (January 23, 1996)[37]\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*JDK 1.1 (February 19, 1996)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*J2SE 1.2 (December 8, 1998)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*J2SE 1.3 (May 8, 2000)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*J2SE 1.4 (February 6, 2002)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            *J2SE 5.0 (September 30, 2004)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            *Java SE 6 (December 11, 2006)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*Java SE 7 (July 28, 2011)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*Java SE 8 (March 18, 2014)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            *Java SE 9 (September 21, 2017)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*Java SE 10 (March 20, 2018)</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            *Java SE 11 (September 25, 2018)[38]\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">*Java SE 12 (March 19, 2019)</Typography>\n        </ListItem>\n\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h2\">Editions</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Java Card for smart-cards.</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java Platform, Micro Edition (Java ME) – targeting environments with\n            limited resources.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java Platform, Standard Edition (Java SE) – targeting workstation\n            environments.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java Platform, Enterprise Edition (Java EE) – targeting large\n            distributed enterprise or Internet environments.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h2\">Execution system</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Java JVM and Bytecode</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            One design goal of Java is portability, which means that programs\n            written for the Java platform must run similarly on any combination\n            of hardware and operating system with adequate run time support.\n            This is achieved by compiling the Java language code to an\n            intermediate representation called Java bytecode, instead of\n            directly to architecture-specific machine code. Java bytecode\n            instructions are analogous to machine code, but they are intended to\n            be executed by a virtual machine (VM) written specifically for the\n            host hardware. End users commonly use a Java Runtime Environment\n            (JRE) installed on their machine for standalone Java applications,\n            or in a web browser for Java applets. Standard libraries provide a\n            generic way to access host-specific features such as graphics,\n            threading, and networking. The use of universal bytecode makes\n            porting simple. However, the overhead of interpreting bytecode into\n            machine instructions made interpreted programs almost always run\n            more slowly than native executables. Just-in-time (JIT) compilers\n            that compile byte-codes to machine code during runtime were\n            introduced from an early stage. Java itself is platform-independent\n            and is adapted to the particular platform it is to run on by a Java\n            virtual machine for it, which translates the Java bytecode into the\n            platform's machine language\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Performance</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Programs written in Java have a reputation for being slower and\n            requiring more memory than those written in C++.[44][45] However,\n            Java programs' execution speed improved significantly with the\n            introduction of just-in-time compilation in 1997/1998 for Java\n            1.1,[46] the addition of language features supporting better code\n            analysis (such as inner classes, the StringBuilder class, optional\n            assertions, etc.), and optimizations in the Java virtual machine,\n            such as HotSpot becoming the default for Sun's JVM in 2000. With\n            Java 1.5, the performance was improved with the addition of the\n            java.util.concurrent package, including lock free implementations of\n            the ConcurrentMaps and other multi-core collections, and it was\n            improved further with Java 1.6.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Non-JVM</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Some platforms offer direct hardware support for Java; there are\n            micro controllers that can run Java bytecode in hardware instead of\n            a software Java virtual machine,[47] and some ARM-based processors\n            could have hardware support for executing Java bytecode through\n            their Jazelle option, though support has mostly been dropped in\n            current implementations of ARM.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Automatic memory management</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java uses an automatic garbage collector to manage memory in the\n            object lifecycle. The programmer determines when objects are\n            created, and the Java runtime is responsible for recovering the\n            memory once objects are no longer in use. Once no references to an\n            object remain, the unreachable memory becomes eligible to be freed\n            automatically by the garbage collector. Something similar to a\n            memory leak may still occur if a programmer's code holds a reference\n            to an object that is no longer needed, typically when objects that\n            are no longer needed are stored in containers that are still in use.\n            If methods for a non-existent object are called, a null pointer\n            exception is thrown.[48][49] One of the ideas behind Java's\n            automatic memory management model is that programmers can be spared\n            the burden of having to perform manual memory management. In some\n            languages, memory for the creation of objects is implicitly\n            allocated on the stack or explicitly allocated and deallocated from\n            the heap. In the latter case, the responsibility of managing memory\n            resides with the programmer. If the program does not deallocate an\n            object, a memory leak occurs. If the program attempts to access or\n            deallocate memory that has already been deallocated, the result is\n            undefined and difficult to predict, and the program is likely to\n            become unstable or crash. This can be partially remedied by the use\n            of smart pointers, but these add overhead and complexity. Note that\n            garbage collection does not prevent logical memory leaks, i.e. those\n            where the memory is still referenced but never used. Garbage\n            collection may happen at any time. Ideally, it will occur when a\n            program is idle. It is guaranteed to be triggered if there is\n            insufficient free memory on the heap to allocate a new object; this\n            can cause a program to stall momentarily. Explicit memory management\n            is not possible in Java. Java does not support C/C++ style pointer\n            arithmetic, where object addresses can be arithmetically manipulated\n            (e.g. by adding or subtracting an offset). This allows the garbage\n            collector to relocate referenced objects and ensures type safety and\n            security. As in C++ and some other object-oriented languages,\n            variables of Java's primitive data types are either stored directly\n            in fields (for objects) or on the stack (for methods) rather than on\n            the heap, as is commonly true for non-primitive data types (but see\n            escape analysis). This was a conscious decision by Java's designers\n            for performance reasons. Java contains multiple types of garbage\n            collectors. By default, HotSpot uses the parallel scavenge garbage\n            collector.[50] However, there are also several other garbage\n            collectors that can be used to manage the heap. For 90% of\n            applications in Java, the Concurrent Mark-Sweep (CMS) garbage\n            collector is sufficient.[51] Oracle aims to replace CMS with the\n            Garbage-First Collector (G1).[52] Having solved the memory\n            management problem does not relieve the programmer of the burden of\n            handling properly other kind of resources, like network or database\n            connections, file handles, etc., especially in the presence of\n            exceptions. Paradoxically, the presence of a garbage collector has\n            faded the necessity of having an explicit destructor method in the\n            classes, thus rendering the management of these other resources more\n            difficult.[citation needed]\n          </Typography>\n        </ListItem>\n      </List>\n      <br />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props, startTime);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Typography,\n  Paper,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider,\n  Container\n} from \"@material-ui/core\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime, score) => {\n  e.preventDefault();\n  score *= 2;\n  let time = Math.round((Date.now() - startTime) / 1000 / 60);\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        D: score,\n        D_T: time * 3\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  time = time >= 9 ? 9 : time;\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n\n  props.history.push(\"/course/\" + props.match.params.course + \"/Activity\");\n};\n\nexport default function Definitions(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  const [java, setJava] = useState(false);\n\n  const handleJava = () => {\n    setJava(true);\n  };\n\n  const [jvm, setJvm] = useState(false);\n\n  const handleJvm = () => {\n    setJvm(true);\n  };\n\n  const [jdk, setJdk] = useState(false);\n\n  const handleJdk = () => {\n    setJdk(true);\n  };\n\n  const [jre, setJre] = useState(false);\n\n  const handleJre = () => {\n    setJre(true);\n  };\n\n  const [jar, setJar] = useState(false);\n\n  const handleJar = () => {\n    setJar(true);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJava}>\n              <Typography variant=\"h5\" gutterBottom>\n                Java\n              </Typography>\n            </ListItem>\n            {java ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\" gutterBottom>\n                    Java is a high-level programming language developed by Sun\n                    Microsystems. It was originally designed for developing\n                    programs for set-top boxes and handheld devices, but later\n                    became a popular choice for creating web applications.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\" gutterBottom>\n                    The Java syntax is similar to C++, but is strictly an\n                    object-oriented programming language. For example, most Java\n                    programs contain classes, which are used to define objects,\n                    and methods, which are assigned to individual classes. Java\n                    is also known for being more strict than C++, meaning\n                    variables and functions must be explicitly defined. This\n                    means Java source code may produce errors or \"exceptions\"\n                    more easily than other languages, but it also limits other\n                    types of errors that may be caused by undefined variables or\n                    unassigned types.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJvm}>\n              <Typography variant=\"h5\">JVM</Typography>\n            </ListItem>\n            {jvm ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    JVM(Java Virtual Machine) acts as a run-time engine to run\n                    Java applications. JVM is the one that actually calls the\n                    main method present in a java code. JVM is a part of\n                    JRE(Java Runtime Environment).\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java applications are called WORA (Write Once Run Anywhere).\n                    This means a programmer can develop Java code on one system\n                    and can expect it to run on any other Java enabled system\n                    without any adjustment. This is all possible because of JVM.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    When we compile a .java file, .class files(contains\n                    byte-code) with the same class names present in .java file\n                    are generated by the Java compiler. This .class file goes\n                    into various steps when we run it. These steps together\n                    describe the whole JVM.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJre}>\n              <Typography variant=\"h5\">JRE</Typography>\n            </ListItem>\n            {jre ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    JRE stands for “Java Runtime Environment” and may also be\n                    written as “Java RTE.” The Java Runtime Environment provides\n                    the minimum requirements for executing a Java application;\n                    it consists of the Java Virtual Machine (JVM), core classes,\n                    and supporting files.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java Runtime Environment (to say JRE) is an installation\n                    package which provides environment to only run(not develop)\n                    the java program(or application)onto your machine. JRE is\n                    only used by them who only wants to run the Java Programs\n                    i.e. end users of your system.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJdk}>\n              <Typography variant=\"h5\">JDK</Typography>\n            </ListItem>\n            {jdk ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    The Java Development Kit (JDK) is a software development\n                    environment used for developing Java applications and\n                    applets. It includes the Java Runtime Environment (JRE), an\n                    interpreter/loader (Java), a compiler (javac), an archiver\n                    (jar), a documentation generator (Javadoc) and other tools\n                    needed in Java development.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java Development Kit (in short JDK) is Kit which provides\n                    the environment to develop and execute(run) the Java\n                    program. JDK is a kit(or package) which includes two things\n                    Development Tools(to provide an environment to develop your\n                    java programs) JRE (to execute your java program). became a\n                    popular choice for creating web applications.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJar}>\n              <Typography variant=\"h5\">JAR</Typography>\n            </ListItem>\n            {jar ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java is a high-level programming language developed by Sun\n                    Microsystems. It was originally designed for developing\n                    programs for set-top boxes and handheld devices, but later\n                    became a popular choice for creating web applications.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java is a high-level programming language developed by Sun\n                    Microsystems. It was originally designed for developing\n                    programs for set-top boxes and handheld devices, but later\n                    became a popular choice for creating web applications.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Divider variant=\"middle\" />\n        </List>\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            let score = 0;\n\n            java ? score++ : score;\n            jdk ? score++ : score;\n            jre ? score++ : score;\n            jar ? score++ : score;\n            jvm ? score++ : score;\n\n            handleSubmit(e, props, startTime, score);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React, { useState} from \"react\";\nimport {\n  Typography,\n  Paper,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider,\n  Container\n} from \"@material-ui/core\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime, score) => {\n  e.preventDefault();\n  score *= 2;\n  let time = Math.round((Date.now() - startTime) / 1000 / 60);\n  time = time >= 9 ? 9 : time;\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        ABC: score,\n        ABC_T: time * 3\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n\n  props.history.push(\"/course/\" + props.match.params.course + \"/Definitons\");\n};\n\nexport default function Overview(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  const [intro, setIntro] = useState(false);\n\n  const handleIntro = () => {\n    setIntro(true);\n  };\n\n  const [basics, setBasics] = useState(false);\n\n  const handleBasics = () => {\n    setBasics(true);\n  };\n\n  const [inter, setInter] = useState(false);\n\n  const handleInter = () => {\n    setInter(true);\n  };\n\n  const [oops, setOops] = useState(false);\n\n  const handleOops = () => {\n    setOops(true);\n  };\n\n  const [adv, setAdv] = useState(false);\n\n  const handleAdv = () => {\n    setAdv(true);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleIntro}>\n              <Typography variant=\"h5\" gutterBottom>\n                Introduction\n              </Typography>\n            </ListItem>\n            {intro ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\" gutterBottom>\n                    In this section we learn the basic & fundamental things\n                    about Java\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleBasics}>\n              <Typography variant=\"h5\">Basics</Typography>\n            </ListItem>\n            {basics ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Basic programming concepts like contditional statements and\n                    loop statements and variables and thier syntax will be\n                    covered here.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleInter}>\n              <Typography variant=\"h5\">Intermediatory</Typography>\n            </ListItem>\n            {inter ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    concepts like packages classes functions access modifiers\n                    will be covered here.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleOops}>\n              <Typography variant=\"h5\">\n                Object Oriented Programming With Java\n              </Typography>\n            </ListItem>\n            {oops ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Object Oriented concepts like inheritence and abstracting\n                    will be covered here.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Java Interface concepts also will take importance phase in\n                    this chapter\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleAdv}>\n              <Typography variant=\"h5\">Advanced Java</Typography>\n            </ListItem>\n            {adv ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Advanced java concepts like threads and streams and lamda\n                    kinda things will take dominance here.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Networking in java also is an important concept to learn.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Divider variant=\"middle\" />\n        </List>\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            let score = 0;\n\n            intro ? score++ : score;\n            inter ? score++ : score;\n            oops ? score++ : score;\n            adv ? score++ : score;\n            basics ? score++ : score;\n\n            handleSubmit(e, props, startTime, score);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Typography,\n  Paper,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider,\n  Container\n} from \"@material-ui/core\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime, score) => {\n  e.preventDefault();\n  score *= 2;\n  let time = Math.round((Date.now() - startTime) / 1000 / 60);\n  time = time >= 9 ? 9 : time;\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        AAC: score,\n        AAC_T: time * 3\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  let learnningStyle = \"\";\n\n  try {\n    const res = await axios.get(\n      \"http://127.0.0.1:8000/api/v1/student/ml/get/\" + authToken\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully fetched Activity Data\");\n      learnningStyle = res.data;\n    } else {\n      alert(\"Problem While Fetching\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  const coursName = props.match.params.course;\n\n  props.history.push(\"/course/\" + coursName + \"/ls\" + learnningStyle);\n};\n\nexport default function Summary(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  const [java, setJava] = useState(false);\n\n  const handleJava = () => {\n    setJava(true);\n  };\n\n  const [basics, setBasics] = useState(false);\n\n  const handleBasics = () => {\n    setBasics(true);\n  };\n\n  const [inter, setInter] = useState(false);\n\n  const handleInter = () => {\n    setInter(true);\n  };\n\n  const [oops, setOops] = useState(false);\n\n  const handleOops = () => {\n    setOops(true);\n  };\n\n  const [adv, setAdv] = useState(false);\n\n  const handleAdv = () => {\n    setAdv(true);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleJava}>\n              <Typography variant=\"h5\" gutterBottom>\n                Java - Summary\n              </Typography>\n            </ListItem>\n            {java ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\" gutterBottom>\n                    Java is a high-level programming language developed by Sun\n                    Microsystems. It was originally designed for developing\n                    programs for set-top boxes and handheld devices, but later\n                    became a popular choice for creating web applications.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleBasics}>\n              <Typography variant=\"h5\">Java Basics - Summary</Typography>\n            </ListItem>\n            {basics ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    So, the basic concepts of java are, just like any other\n                    programming languages, contional statements, loop\n                    statements, variables etc.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleInter}>\n              <Typography variant=\"h5\">Concepts In Java - Summary</Typography>\n            </ListItem>\n            {inter ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Popular concepts that are used in java are Classes,\n                    Interfaces, Packages thess will get u started in Java.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleOops}>\n              <Typography variant=\"h5\">\n                Object Oriented Programming With Java\n              </Typography>\n            </ListItem>\n            {oops ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Object oriented concepts are mandatory things you should\n                    learn if you wanna use java. It will enable you to work with\n                    teams that means you will learn making loosely coupled\n                    applications using these concepts\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Paper className={classes.heroButtons}>\n            <ListItem onClick={handleAdv}>\n              <Typography variant=\"h5\">Advanced Java - Summary</Typography>\n            </ListItem>\n            {adv ? (\n              <React.Fragment>\n                <ListItem>\n                  <Typography variant=\"body1\">\n                    Concepts like Threads and streams enables you to use Java\n                    effectively. With that you could build enterprice\n                    applications and applicatoons that runs in network. Also,\n                    Networking in java will help you build networking modules\n                    such as Gateways.\n                  </Typography>\n                </ListItem>\n              </React.Fragment>\n            ) : null}\n          </Paper>\n          <Divider variant=\"middle\" />\n        </List>\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            let score = 0;\n\n            java ? score++ : score;\n            inter ? score++ : score;\n            oops ? score++ : score;\n            adv ? score++ : score;\n            basics ? score++ : score;\n\n            handleSubmit(e, props, startTime, score);\n          }}\n        >\n          Finish\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  CardContent,\n  CardMedia,\n  Card,\n  List,\n  ListItem,\n  CardActionArea,\n  CardActions,\n  Divider,\n  Container\n} from \"@material-ui/core\";\nimport CheckCircleSharpIcon from \"@material-ui/icons/CheckCircleSharp\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nconst handleSubmit = async (e, props, startTime, score) => {\n  e.preventDefault();\n  let time = (Date.now() - startTime) / 1000 / 60;\n\n  score *= 2;\n  score = score >= 9 ? 9 : score;\n  time = time >= 9 ? 9 : time;\n  time = Math.round(time);\n\n  const authToken = sessionStorage.getItem(\"auth\");\n\n  try {\n    const res = await axios.patch(\n      \"http://127.0.0.1:8000/api/v1/student/ml/post/\" + authToken,\n      {\n        V: score\n        // \"V_T\" :  time\n      }\n    );\n\n    if (res.status === 200) {\n      console.log(\"Successfully Pushed Activity Data\");\n    } else {\n      alert(\"Problem While Pushing\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n\n  console.log(\"score\" + score);\n  console.log(\"time\" + time);\n  props.history.push(\"/course/\" + props.match.params.course + \"/Summary\");\n};\n\nexport default function Visual(props) {\n  const classes = useStyles();\n\n  const startTime = Date.now();\n\n  const [inheritance, setInheritance] = React.useState(true);\n  const [single, setSingle] = React.useState(true);\n  const [multi, setMulti] = React.useState(true);\n  const [hybrid, setHybrid] = React.useState(true);\n  const [hierarchical, setHierarchical] = React.useState(true);\n\n  const handleInheritance = () => {\n    setInheritance(false);\n  };\n\n  const handleSingle = () => {\n    setSingle(false);\n  };\n\n  const handleMulti = () => {\n    setMulti(false);\n  };\n\n  const handleHybrid = () => {\n    setHybrid(false);\n  };\n\n  const handleHierarchical = () => {\n    setHierarchical(false);\n  };\n\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h5\">Inheritance</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root} raised={inheritance}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Inheritance-types-java.png\"\n                  title=\"Inheritance\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Inheritance\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    Inheritance is a widely used OOPs concept which is used to\n                    implemet abstraction and coupling in our application. Also,\n                    it will be used full if we work with a team or a group of\n                    people.\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n              <CardActions className={classes.handleButton}>\n                <Button\n                  size=\"small\"\n                  color={inheritance ? \"secondary\" : \"primary\"}\n                  onClick={handleInheritance}\n                >\n                  <CheckCircleSharpIcon />\n                </Button>\n              </CardActions>\n            </Card>\n          </ListItem>\n          <ListItem>\n            <ListItem>\n              <Card className={classes.root} raised={single}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt=\"Contemplative Reptile\"\n                    height=\"500\"\n                    image=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Single-Inheritance-144x180.png\"\n                    title=\"Single Inheritance\"\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Single Inheritance\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      In single inheritance, one class inherits the properties\n                      of another. It enables a derived class to inherit the\n                      properties and behavior from a single parent class. This\n                      will in turn enable code reusability as well as add new\n                      features to the existing code. Here, Class A is your\n                      parent class and Class B is your child class which\n                      inherits the properties and behavior of the parent class.\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions className={classes.handleButton}>\n                  <Button\n                    size=\"small\"\n                    color={single ? \"secondary\" : \"primary\"}\n                    onClick={handleSingle}\n                  >\n                    <CheckCircleSharpIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </ListItem>\n            <ListItem>\n              <Card className={classes.root} raised={multi}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt=\"Contemplative Reptile\"\n                    height=\"500\"\n                    image=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Multilevel-Inheritance-204x300.png\"\n                    title=\" Multilevel Inheritance\"\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Multilevel Inheritance\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      When a class is derived from a class which is also derived\n                      from another class, i.e. a class having more than one\n                      parent class but at different levels, such type of\n                      inheritance is called Multilevel Inheritance. If we talk\n                      about the flowchart, class B inherits the properties and\n                      behavior of class A and class C inherits the properties of\n                      class B. Here A is the parent class for B and class B is\n                      the parent class for C. So in this case class C implicitly\n                      inherits the properties and methods of class A along with\n                      Class B. That’s what is multilevel inheritance.\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions className={classes.handleButton}>\n                  <Button\n                    size=\"small\"\n                    color={multi ? \"secondary\" : \"primary\"}\n                    onClick={handleMulti}\n                  >\n                    <CheckCircleSharpIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </ListItem>\n          </ListItem>\n          <ListItem>\n            <ListItem>\n              <Card className={classes.root} raised={hybrid}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt=\"Contemplative Reptile\"\n                    // height=\"500\"\n                    image=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Hybrid-Inheritance-186x180.png\"\n                    title=\"Hybrid Inheritance\"\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Hybrid Inheritance\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Hybrid inheritance is a combination of multiple\n                      inheritance and multilevel inheritance. Since multiple\n                      inheritance is not supported in Java as it leads to\n                      ambiguity, so this type of inheritance can only be\n                      achieved through the use of the interfaces. If we talk\n                      about the flowchart, class A is a parent class for class B\n                      and C, whereas Class B and C are the parent class of D\n                      which is the only child class\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions className={classes.handleButton}>\n                  <Button\n                    size=\"small\"\n                    color={hybrid ? \"secondary\" : \"primary\"}\n                    onClick={handleHybrid}\n                  >\n                    <CheckCircleSharpIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </ListItem>\n            <ListItem>\n              <Card className={classes.root} raised={hierarchical}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt=\"Contemplative Reptile\"\n                    // height=\"500\"\n                    image=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Hierarchical-Inheritance-300x178.png\"\n                    title=\"Hierarchical  Inheritance\"\n                  />\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Hierarchical Inheritance\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      When a class has more than one child classes (sub classes)\n                      o r in other words, more than one child classes have the\n                      same parent class, then such kind of inheritance is known\n                      as hierarchical. If we talk about the flowchart, Class B\n                      and C are the child classes which are inheriting from the\n                      parent class i.e Class A. Let’s see the syntax for\n                      hierarchical inheritance in Java:\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions className={classes.handleButton}>\n                  <Button\n                    size=\"small\"\n                    color={hierarchical ? \"secondary\" : \"primary\"}\n                    onClick={handleHierarchical}\n                  >\n                    <CheckCircleSharpIcon />\n                  </Button>\n                </CardActions>\n              </Card>\n            </ListItem>\n          </ListItem>\n          <Divider variant=\"middle\" />\n        </List>\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            let score = 0;\n\n            inheritance ? score : score++;\n            single ? score : score++;\n            multi ? score : score++;\n            hybrid ? score : score++;\n            hierarchical ? score : score++;\n\n            handleSubmit(e, props, startTime, score);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  makeStyles,\n  IconButton,\n  AppBar,\n  Card,\n  CardContent,\n  CardMedia,\n  CssBaseline,\n  Grid,\n  Toolbar,\n  Typography,\n  Container\n} from \"@material-ui/core\";\nimport { Link as Linkto } from \"react-router-dom\";\nimport courses from \"../../Data/courses\";\nimport learningStyles from \"../../../Shared/Data/learningStyles\";\nimport axios from \"axios\";\n\nfunction Copyright() {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Linkto to=\"/\" className={classes.link}>\n        Chill Studies\n      </Linkto>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  HomeButton: {\n    float: \"right\"\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"left\"\n  },\n  title: {\n    flexGrow: 1\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nconst handleRoute = async (props, card, course, lsType) => {\n  const path = props.history.location.pathname + \"\";\n\n  let to = \"\";\n\n  lsType = path.includes(\"/home\")\n    ? (\n        await axios.get(\n          \"http://127.0.0.1:8000/api/v1/student/ml/get/\" +\n            sessionStorage.getItem(\"auth\")\n        )\n      ).data\n    : lsType;\n\n  to =\n    path === \"/dashboard\"\n      ? `/course/${card.name}/home`\n      : (to = path.includes(\"/ls\")\n          ? `/course/${course.name}/ls/${lsType}/${card}`\n          : (to = path.includes(\"/home\")\n              ? card.includes(\"1\")\n                ? `/course/${course.name}`\n                : `/course/${course.name}/ls/${lsType}`\n              : (to = `/course/${course.name}/${card}`)));\n\n  props.history.push(to);\n};\n\nexport default function Home(props) {\n  const classes = useStyles();\n\n  const path = props.history.location.pathname + \"\";\n\n  const chapters = [\"Chapter-1\", \"Chapter-2\"];\n\n  const lsType = props.match.params.ls_type;\n\n  const cards = path.startsWith(\"/dashboard\")\n    ? courses // its dhashboard\n    : path.includes(\"/home\")\n    ? chapters // Its Course Home that includes Chapters\n    : path.includes(\"/ls\")\n    ? learningStyles.find(style => lsType === style.type).contents // Its the LS Predicted Course Chapter Home\n    : [\"Overview\", \"Definitons\", \"Activity\", \"Content\", \"Visual\", \"Summary\"]; // Its the default Course Chapter Home\n\n  let course =\n    path === \"/dashboard\"\n      ? \"valid\"\n      : courses.find(course => props.match.params.course === course.name);\n\n  return (\n    <React.Fragment>\n      {course ? (\n        <React.Fragment>\n          <CssBaseline />\n          <AppBar position=\"relative\">\n            <Toolbar>\n              {path === \"/dashboard\" ? (\n                <Typography\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  noWrap\n                  className={classes.title}\n                >\n                  Dashboard\n                </Typography>\n              ) : (\n                <React.Fragment>\n                  <Typography\n                    variant=\"h6\"\n                    color=\"inherit\"\n                    noWrap\n                    className={classes.title}\n                  >\n                    {course.name}\n                  </Typography>\n                  <IconButton\n                    edge=\"start\"\n                    className={classes.HomeButton}\n                    color=\"inherit\"\n                    aria-label=\"home\"\n                    onClick={e => {\n                      e.preventDefault();\n                      props.history.push(\"/dashboard\");\n                    }}\n                  >\n                    <Typography gutterBottom variant=\"body1\">\n                      Dashboard\n                    </Typography>\n                  </IconButton>\n                  <IconButton\n                    edge=\"start\"\n                    color=\"inherit\"\n                    aria-label=\"home\"\n                    onClick={e => {\n                      e.preventDefault();\n                      sessionStorage.clear();\n                      props.history.push(\"/\");\n                    }}\n                  >\n                    <Typography gutterBottom variant=\"body1\">\n                      Log Out\n                    </Typography>\n                  </IconButton>\n                </React.Fragment>\n              )}\n            </Toolbar>\n          </AppBar>\n          <main>\n            <div className={classes.heroContent}>\n              <Container maxWidth=\"sm\">\n                <Typography\n                  component=\"h1\"\n                  variant=\"h2\"\n                  align=\"center\"\n                  color=\"textPrimary\"\n                  gutterBottom\n                >\n                  {path === \"/dashboard\"\n                    ? `Welcome to your Dashboard !`\n                    : `Welcome to ${course.name}!`}\n                </Typography>\n                {path === \"/dashboard\" ? (\n                  <Typography\n                    variant=\"h5\"\n                    align=\"center\"\n                    color=\"textSecondary\"\n                    paragraph\n                  >\n                    You can find your subscribed courses below.\n                  </Typography>\n                ) : null}\n                <Typography\n                  variant=\"h5\"\n                  align=\"center\"\n                  color=\"textSecondary\"\n                  paragraph\n                >\n                  Happy Learning\n                </Typography>\n              </Container>\n            </div>\n            <Container className={classes.cardGrid} maxWidth=\"md\">\n              <Grid container spacing={2}>\n                {cards.map((card, i) => (\n                  <Grid\n                    item\n                    key={card}\n                    xs={12}\n                    sm={6}\n                    md={path.includes(\"/ls\") || path.includes(\"/home\") ? 6 : 4}\n                  >\n                    <div\n                      onClick={e => {\n                        handleRoute(props, card, course, lsType);\n                      }}\n                    >\n                      <Card className={classes.card}>\n                        <CardMedia\n                          className={classes.cardMedia}\n                          image={\n                            path === \"/dashboard\" ? card.image : course.image\n                          }\n                          title={\n                            path === \"/dashboard\"\n                              ? card.name\n                              : `${course.name} ${card}`\n                          }\n                        />\n                        <CardContent className={classes.cardContent}>\n                          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {path === \"/dashboard\" ? card.name : card}\n                          </Typography>\n                          <Typography>\n                            {path === \"/dashboard\" ? card.desc : course.desc}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </Grid>\n                ))}\n              </Grid>\n            </Container>\n          </main>\n          <footer className={classes.footer}>\n            <Typography variant=\"h6\" align=\"center\" gutterBottom>\n              “Study hard what interests you the most in the most undisciplined,\n              irreverent and original manner possible.”\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              align=\"center\"\n              color=\"textSecondary\"\n              component=\"p\"\n            >\n              Richard P. Feynman\n            </Typography>\n            <Copyright />\n          </footer>\n        </React.Fragment>\n      ) : (\n        <h1> 404 Error </h1>\n      )}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  AppBar,\n  CardContent,\n  Card,\n  List,\n  ListItem,\n  Divider,\n  Toolbar,\n  Container\n} from \"@material-ui/core\";\n\nimport LearningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nexport default function LS(props) {\n  const classes = useStyles();\n\n  let lsTypeParam = props.match.params.ls_type + \"\";\n\n  const ls = LearningStyles.find(ls => lsTypeParam === ls.type);\n\n  const [hide, setHide] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <div>\n        <AppBar position=\"relative\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Learning Styles\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container maxWidth=\"md\">\n          <Card className={classes.card}>\n            <CardContent className={classes.cardContent}>\n              <List>\n                <ListItem>\n                  <Typography gutterBottom variant=\"body2\" color=\"secondary\">\n                    Hello there, to improve your ease of study, we use FLSM\n                    mapping techiques to asses your learning style and will give\n                    study materials according to that.\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography gutterBottom variant=\"h4\">\n                    {ls.name}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography gutterBottom variant=\"body1\">\n                    {ls.type.charAt(0) === \"a\"\n                      ? \"You like activites rathar than boring theories\"\n                      : \"You learn from what you study\"}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography gutterBottom variant=\"body1\">\n                    {ls.type.charAt(1) === \"s\"\n                      ? \"You think before approching a problem\"\n                      : \"You give preference to you intuitions\"}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography gutterBottom variant=\"body1\">\n                    {ls.type.charAt(2) === \"v\"\n                      ? \"You like graphical stuff and illustrations\"\n                      : \"You are good with reading ( verbal )\"}\n                  </Typography>\n                </ListItem>\n                <ListItem>\n                  <Typography gutterBottom variant=\"body1\">\n                    {ls.type.charAt(0) === \"s\"\n                      ? \"You study sequencially (step by step)\"\n                      : \"You prefer global view about the things\"}\n                  </Typography>\n                </ListItem>\n                <Divider />\n                <ListItem>\n                  <Typography gutterBottom variant=\"body1\">\n                    In the upcomming chapters you will get the learning\n                    materials that matches your interests. Happly Learning !\n                  </Typography>\n                </ListItem>\n              </List>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.handleButton}\n                onClick={e => {\n                  props.history.push(\n                    \"/course/\" + props.match.params.course + \"/ls/\" + ls.type\n                  );\n                }}\n              >\n                Proceed !\n              </Button>\n            </CardContent>\n          </Card>\n        </Container>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport courses from \"../../../Data/courses\";\nimport {\n  Typography,\n  makeStyles,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  Divider\n} from \"@material-ui/core\";\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\n\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function OverviewVerbal(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              Int belong to what datatypes ?\n            </Typography>\n          </ListItem>\n          <ListItem>\n            {\" \"}\n            <TextField id=\"q1\" label=\"Answer\" />{\" \"}\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              How much bit does byte takes\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q2\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">Array starts from</Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q3\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              boolean is what kind of datatype ?\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q4\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <ListItem>\n            <Typography variant=\"subtitle1\">\n              we can't define functions in interface , true or flase?\n            </Typography>\n          </ListItem>\n          <ListItem>\n            <TextField id=\"q5\" label=\"Answer\" />\n          </ListItem>\n        </ListItem>\n        <Divider variant=\"middle\" />\n      </List>\n      <br />\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Container\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function SummaryVisual(props) {\n  const classes = useStyles();\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardContent>\n                  <iframe\n                    width=\"720\"\n                    height=\"480\"\n                    src=\"https://www.youtube.com/embed/vhV97hyV0fc\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                  ></iframe>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    We Summaries The Java Variabled In The Above Video\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function ContentVerbalDetailed(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">\n            There are majorly two types of languages.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            1 . First one is Statically typed language where each variable and\n            expression type is already known at compile time. Once a variable is\n            declared to be of a certain data type, it cannot hold values of\n            other data types. Example: C, C++, Java.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            2 . The other is Dynamically typed languages. These languages can\n            receive different data types over time. Example: Ruby, Python\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Java is statically typed and also a strongly typed language because\n            in Java, each type of data (such as integer, character, hexadecimal,\n            packed decimal, and so forth) is predefined as part of the\n            programming language and all constants or variables defined for a\n            given program must be described with one of the data types.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Java has two categories of data:</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Primitive Data Type: such as boolean, char, int, short, byte, long,\n            float and double\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Non-Primitive Data Type or Object Data type: such as String, Array,\n            etc.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Primitive Data Type</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Primitive data are only single values and have no special\n            capabilities.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            There are 8 primitive data types:\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            1.boolean : boolean data type represents only one bit of information\n            either true or false, but the size of boolean data type is virtual\n            machine-dependent. Values of type boolean are not converted\n            implicitly or explicitly (with casts) to any other type. But the\n            programmer can easily write conversion code.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>boolean booleanVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>Virtual Machine dependent</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>true, false</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>false</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            2.byte : The byte data type is an 8-bit signed two’s complement\n            integer. The byte data type is useful for saving memory in large\n            arrays.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>byte byteVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>1 byte ( 8 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>-128 to 127</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            3.short : The short data type is a 16-bit signed two’s complement\n            integer. Similar to byte, use a short to save memory in large\n            arrays, in situations where the memory savings actually matters.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>short shortVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>2 byte ( 16 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>-32, 768 to 32, 767 (inclusive)</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            4.int : It is a 32-bit signed two’s complement integer.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>int intVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>4 byte ( 32 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>-2, 147, 483, 648 to 2, 147, 483, 647 (inclusive)</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            5.long : The long data type is a 64-bit two’s complement integer\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>long longVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>8 byte ( 64 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>\n              -9, 223, 372, 036, 854, 775, 808 to 9, 223, 372, 036, 854, 775,\n              807 (inclusive)\n            </code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            6.float : The float data type is a single-precision 32-bit IEEE 754\n            floating point. Use a float (instead of double) if you need to save\n            memory in large arrays of floating point numbers.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>float floatVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>4 byte ( 32 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>upto 7 decimal digits</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0.0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            7.double : The double data type is a double-precision 64-bit IEEE\n            754 floating point. For decimal values, this data type is generally\n            the default choice.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>double doubleVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>8 byte ( 64 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>upto 16 decimal digits</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>0.0</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            8.char : The char data type is a single 16-bit Unicode character.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>char charVar;</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Size :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>2 byte ( 16 bits )</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Values :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>'\\u0000' (0) to '\\uffff' (65535)</code>\n          </Button>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Default Value :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>'\\u0000'</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h6\">\n            Non-Primitive Data Type or Reference Data Types\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            The Reference Data Types will contain a memory address of variable\n            value because the reference types won’t store the variable value\n            directly in memory. They are strings, objects, arrays, etc.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            String : Strings are defined as an array of characters. The\n            difference between a character array and a string is the string is\n            terminated with a special character ‘\\0’. Below is the basic syntax\n            for declaring a string in Java programming language.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">Syntax :</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>{`<String_Type> <string_variable> = “<sequence_of_string>”;`}</code>\n          </Button>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            Class: A class is a user-defined blueprint or prototype from which\n            objects are created. It represents the set of properties or methods\n            that are common to all objects of one type. In general, class\n            declarations can include these components, in order:\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            1. Modifiers : A class can be public or has default access (Refer\n            this for details).\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            2. Class name: The name should begin with a initial letter\n            (capitalized by convention).\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            3. Superclass(if any): The name of the class’s parent (superclass),\n            if any, preceded by the keyword extends. A class can only extend\n            (subclass) one parent.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            4. Interfaces(if any): A comma-separated list of interfaces\n            implemented by the class, if any, preceded by the keyword\n            implements. A class can implement more than one interface.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            5. Body: The class body surrounded by braces, {}.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            Object: It is a basic unit of Object-Oriented Programming and\n            represents the real-life entities. A typical Java program creates\n            many objects, which as you know, interact by invoking methods. An\n            object consists of :\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            1. State : It is represented by attributes of an object. It also\n            reflects the properties of an object.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            2. Behavior : It is represented by methods of an object. It also\n            reflects the response of an object with other objects.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            3. Identity : It gives a unique name to an object and enables one\n            object to interact with other objects.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            Interface: Like a class, an interface can have methods and\n            variables, but the methods declared in an interface are by default\n            abstract (only method signature, no body).\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            1. Interfaces specify what a class must do and not how. It is the\n            blueprint of the class.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            2. An Interface is about capabilities like a Player may be an\n            interface and any class implementing Player must be able to (or must\n            implement) move(). So it specifies a set of methods that the class\n            has to implement.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            3. If a class implements an interface and does not provide method\n            bodies for all functions specified in the interface, then class must\n            be declared abstract.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            4. A Java library example is, Comparator Interface. If a class\n            implements this interface, then it can be used to sort a collection.\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"body1\">\n            Array: An array is a group of like-typed variables that are referred\n            to by a common name.Arrays in Java work differently than they do in\n            C/C++. Following are some important point about Java arrays.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            1. In Java all arrays are dynamically allocated.(discussed below)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            2. Since arrays are objects in Java, we can find their length using\n            member length. This is different from C/C++ where we find length\n            using sizeof.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            3. A Java array variable can also be declared like other variables\n            with [] after the data type.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            4. The variables in the array are ordered and each have an index\n            beginning from 0.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            5. A Java library example is, Comparator Interface. If a class\n            implements this interface, then it can be used to sort a collection.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            6. Java array can be also be used as a static field, a local\n            variable or a method parameter\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            7. The size of an array must be specified by an int value and not\n            long or short.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            8. The direct superclass of an array type is Object.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body2\">\n            9. Every array type implements the interfaces Cloneable and\n            java.io.Serializable.\n          </Typography>\n        </ListItem>\n      </List>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider,\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function ContentVerbalOverview(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body1\">1) Primitive data types</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body1\">2) Non - Primitive data types</Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h4\">Primitive data types</Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"body1\">\n            In Java, we have eight primitive data types: boolean, char, byte,\n            short, int, long, float and double. Java developers included these\n            data types to maintain the portability of java as the size of these\n            primitive data types do not change from one operating system to\n            another.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Byte</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            This can hold whole number between -128 and 127. Mostly used to save\n            memory and when you are certain that the numbers would be in the\n            limit specified by byte data type. Default size of this data type: 1\n            byte. Default value: 0 another.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>byte num; num = 113;</code>\n          </Button>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Short</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            This is greater than byte in terms of size and less than integer.\n            Its range is -32,768 to 32767. Default size of this data type: 2\n            byte\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code> short num; num = 150;</code>\n          </Button>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Long</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Used when int is not large enough to hold the value, it has wider\n            range than int data type, ranging from -9,223,372,036,854,775,808 to\n            9,223,372,036,854,775,807. size: 8 bytes Default value: 0\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code> long num = -12332252626L;</code>\n          </Button>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Double</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Sufficient for holding 15 decimal digits size: 8 bytes\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>double num = -42937737.9d;</code>\n          </Button>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Float</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Sufficient for holding 6 to 7 decimal digits size: 4 bytes\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>float num = 19.98f;</code>\n          </Button>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Boolean</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">holds either true of false.</Typography>\n        </ListItem>\n        <ListItem>\n          <Button variant=\"outlined\">\n            <code>float num = 19.98f;</code>\n          </Button>\n        </ListItem>\n\n        <Divider variant=\"middle\" />\n\n        <ListItem>\n          <Typography variant=\"h4\">Non - Primitive data types</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">String</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            String is a sequence of characters\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Arrays</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Arrays in Java are homogeneous data structures implemented in Java\n            as objects.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Classes</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            A class in Java is a blueprint which includes all your data\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography variant=\"h6\">Interface</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            Like a class, an interface can have methods and variables, but the\n            methods declared in interface are by default abstract (only method\n            signature, no body).\n          </Typography>\n        </ListItem>\n      </List>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Container\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function ContentVisualDetailed(props) {\n  const classes = useStyles();\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardContent>\n                  <iframe\n                    width=\"720\"\n                    height=\"480\"\n                    src=\"https://www.youtube.com/embed/bqPIWlnjWbA\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                  ></iframe>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    Java Data Types are explained in the above video\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Container\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function ContentVisualDetailed(props) {\n  const classes = useStyles();\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardContent>\n                  <iframe\n                    width=\"720\"\n                    height=\"480\"\n                    src=\"https://www.youtube.com/embed/snIUtdg0K30\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                  ></iframe>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Overview of Java Data Types are given in the above video\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  Divider,\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\nimport KeyboardArrowRightOutlinedIcon from \"@material-ui/icons/KeyboardArrowRightOutlined\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  console.log(\"Vijay\");\n\n  props.history.push(path);\n};\n\nexport default function DefinitionVerbalDetailed(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h4\"> Primitive Data Types </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            {\" \"}\n            There are eight primitive datatypes supported by Java. Primitive\n            datatypes are predefined by the language and named by a keyword. Let\n            us now look into the eight primitive data types in detail.{\" \"}\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">byte</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Byte data type is an 8-bit signed two's complement integer\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">Minimum value is -128 (-2^7)</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Maximum value is 127 (inclusive)(2^7 -1)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">short</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Short data type is a 16-bit signed two's complement integer\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Minimum value is -32,768 (-2^15)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Maximum value is 32,767 (inclusive) (2^15 -1)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">int</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Int data type is a 32-bit signed two's complement integer.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Minimum value is - 2,147,483,648 (-2^31)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Maximum value is 2,147,483,647(inclusive) (2^31 -1)\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">float</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Float data type is a single-precision 32-bit IEEE 754 floating point\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Float is mainly used to save memory in large arrays of floating\n            point numbers\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">double</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            double data type is a double-precision 64-bit IEEE 754 floating\n            point\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            This data type is generally used as the default data type for\n            decimal values, generally the default choice\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Float data type is never used for precise values such as currency\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">double</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            double data type is a double-precision 64-bit IEEE 754 floating\n            point\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            This data type is generally used as the default data type for\n            decimal values, generally the default choice\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Double data type should never be used for precise values such as\n            currency\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">boolean</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            boolean data type represents one bit of information\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            There are only two possible values: true and false\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            This data type is used for simple flags that track true/false\n            conditions\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">char</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            char data type is a single 16-bit Unicode character\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h4\"> Reference Datatypes </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Reference variables are created using defined constructors of the\n            classes. They are used to access objects. These variables are\n            declared to be of a specific type that cannot be changed. For\n            example, Employee, Puppy, etc.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Class objects and various type of array variables come under\n            reference datatype.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Default value of any reference variable is null.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            A reference variable can be used to refer any object of the declared\n            type or any compatible type.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Example: Animal animal = new Animal(\"giraffe\");\n          </Typography>\n        </ListItem>\n      </List>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  Divider\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\nimport ArrowForwardIosRoundedIcon from \"@material-ui/icons/ArrowForwardIosRounded\";\nimport KeyboardArrowRightOutlinedIcon from \"@material-ui/icons/KeyboardArrowRightOutlined\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  console.log(\"Vijay\");\n\n  props.history.push(path);\n};\n\nexport default function DefinitionVerbalOverview(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h4\"> Primitive Data Types </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            {\" \"}\n            There are eight primitive datatypes supported by Java. Primitive\n            datatypes are predefined by the language and named by a keyword. Let\n            us now look into the eight primitive data types in detail.{\" \"}\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">byte</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Byte data type is an 8-bit signed two's complement integer\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">short</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Short data type is a 16-bit signed two's complement integer\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">int</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Int data type is a 32-bit signed two's complement integer.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">float</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Float data type is a single-precision 32-bit IEEE 754 floating point\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">double</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            double data type is a double-precision 64-bit IEEE 754 floating\n            point\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">boolean</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            boolean data type represents one bit of information\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <ListItemIcon>\n            <ArrowForwardIosRoundedIcon />\n          </ListItemIcon>\n          <Typography variant=\"h6\">char</Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            char data type is a single 16-bit Unicode character\n          </Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h4\"> Reference Datatypes </Typography>\n        </ListItem>\n        <ListItem>\n          <ListItemIcon>\n            <KeyboardArrowRightOutlinedIcon />\n          </ListItemIcon>\n          <Typography variant=\"body1\">\n            Reference variables are created using defined constructors of the\n            classes. They are used to access objects. These variables are\n            declared to be of a specific type that cannot be changed. For\n            example, Employee, Puppy, etc.\n          </Typography>\n        </ListItem>\n      </List>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Container\n} from \"@material-ui/core\";\n\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  },\n  root: {\n    width: \"100%\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function DefinitionVisualDetailed(props) {\n  const classes = useStyles();\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://1.bp.blogspot.com/-E_tUghZLenM/XW_qJ7IEg4I/AAAAAAAAC7I/NInngU0p89gCgpn1hdlaETa1zC4QvE6_ACLcBGAs/s1600/java-data-types.png\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the classification of variables in\n                    Java\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://1.bp.blogspot.com/-Lx36U7N4DP0/XXCP8TOCkaI/AAAAAAAAC7U/R2MJbpwF6Ao6mek4simcY4e04f0aWSYPQCLcBGAs/s1600/integer-data-types.png\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the classification of Integer\n                    datatypes in Java\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n          <ListItem>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"centre\">Type</TableCell>\n                    <TableCell align=\"centre\">Size</TableCell>\n                    <TableCell align=\"centre\">Minimum value</TableCell>\n                    <TableCell align=\"centre\">Maximum value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"centre\">byte</TableCell>\n                    <TableCell align=\"centre\">One byte</TableCell>\n                    <TableCell align=\"centre\">-128</TableCell>\n                    <TableCell align=\"centre\">127</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">short</TableCell>\n                    <TableCell align=\"centre\"> Two bytes</TableCell>\n                    <TableCell align=\"centre\"> -32, 768</TableCell>\n                    <TableCell align=\"centre\">32, 767</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">int</TableCell>\n                    <TableCell align=\"centre\">Four bytes</TableCell>\n                    <TableCell align=\"centre\">-2, 147, 483, 648</TableCell>\n                    <TableCell align=\"centre\">2, 147, 483, 647</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">long</TableCell>\n                    <TableCell align=\"centre\">Eight bytes</TableCell>\n                    <TableCell align=\"centre\">\n                      -9, 223, 372, 036, 854, 775, 808\n                    </TableCell>\n                    <TableCell align=\"centre\">\n                      9, 223, 372, 036, 854, 775, 807\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://1.bp.blogspot.com/-7yTep7sMX-k/XXI_z9QZnpI/AAAAAAAAC7g/F-usnpO8rpk99e7cWEGj92gZjBy69hoywCLcBGAs/s1600/floating-point-data-types.png\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the classification of floatingpoint\n                    datatypes in Java\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n          <ListItem>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"centre\">Type</TableCell>\n                    <TableCell align=\"centre\">Size</TableCell>\n                    <TableCell align=\"centre\">Minimum value</TableCell>\n                    <TableCell align=\"centre\">Maximum value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"centre\">float</TableCell>\n                    <TableCell align=\"centre\">Four byte</TableCell>\n                    <TableCell align=\"centre\">3.4e-038</TableCell>\n                    <TableCell align=\"centre\">3.4e+038</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">double</TableCell>\n                    <TableCell align=\"centre\"> Eight bytes</TableCell>\n                    <TableCell align=\"centre\"> 1.7e-308</TableCell>\n                    <TableCell align=\"centre\">1.7e+308</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Container\n} from \"@material-ui/core\";\n\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  },\n  root: {\n    width: \"100%\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function DefinitionVisualOverview(props) {\n  const classes = useStyles();\n  return (\n    <Container>\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://static.javatpoint.com/images/java-data-types.png\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the classification of variables in\n                    Java\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n          <ListItem>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"centre\">Data Type</TableCell>\n                    <TableCell align=\"centre\">Default Value</TableCell>\n                    <TableCell align=\"centre\">Default size</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"centre\">boolean</TableCell>\n                    <TableCell align=\"centre\">false</TableCell>\n                    <TableCell align=\"centre\">1 bit</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">char</TableCell>\n                    <TableCell align=\"centre\"> '\\u0000'</TableCell>\n                    <TableCell align=\"centre\"> 2 byte</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">byte</TableCell>\n                    <TableCell align=\"centre\">0</TableCell>\n                    <TableCell align=\"centre\">1 byte</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">short</TableCell>\n                    <TableCell align=\"centre\">0</TableCell>\n                    <TableCell align=\"centre\">2 bit</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">int</TableCell>\n                    <TableCell align=\"centre\">0</TableCell>\n                    <TableCell align=\"centre\">4 byte</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">long</TableCell>\n                    <TableCell align=\"centre\">0L</TableCell>\n                    <TableCell align=\"centre\">8 byte</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">float</TableCell>\n                    <TableCell align=\"centre\">0.0f</TableCell>\n                    <TableCell align=\"centre\">4 byte</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell align=\"centre\">double</TableCell>\n                    <TableCell align=\"centre\">0.0d</TableCell>\n                    <TableCell align=\"centre\">8 byte</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>\n        </List>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React  from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem,\n  Divider,\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function OverviewVerbal(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            There are two data types available in Java\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"h6\">Primitive Data Types</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* byte</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* short</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* int</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* long</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* float</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* double</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* boolean</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">* char</Typography>\n        </ListItem>\n        <Divider variant=\"middle\" />\n        <ListItem>\n          <Typography variant=\"h6\">Reference/Object Data Types</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography variant=\"body1\">\n            * Reference variables are created using defined constructors of the\n            classes. They are used to access objects. These variables are\n            declared to be of a specific type that cannot be changed.\n          </Typography>\n        </ListItem>\n      </List>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Container\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function OverviewVerbal(props) {\n  const classes = useStyles();\n  return (\n    <Container maxWidth=\"sm\">\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://1.bp.blogspot.com/-E_tUghZLenM/XW_qJ7IEg4I/AAAAAAAAC7I/NInngU0p89gCgpn1hdlaETa1zC4QvE6_ACLcBGAs/s1600/java-data-types.png\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the classification of variables in\n                    Java\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Button,\n  List,\n  ListItem\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function OverviewVerbal(props) {\n  const classes = useStyles();\n  return (\n    <form autoComplete=\"off\" noValidate>\n      <List>\n        <ListItem>\n          <Typography variant=\"h2\">Data Types in Java</Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body2\">\n            So that was all about the non-primitive data types. Now let’s\n            understand the difference between primitive and non-primitive data\n            types.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"h4\">\n            The difference between primitive and non-primitive data types are as\n            follows:\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body2\">\n            Primitive types are predefined in Java.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body2\">\n            Non-primitive types are created by the programmer and is not defined\n            by Java.\n          </Typography>\n        </ListItem>\n        <ListItem>\n          <Typography varient=\"body2\">\n            Non-primitive types are created by the programmer and is not defined\n            by Java.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography varient=\"body2\">\n            Non Primitive types can be used to call methods to perform certain\n            operations, while primitive types cannot.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography varient=\"body2\">\n            A primitive type always has a value, whereas non-primitive types can\n            be null.\n          </Typography>\n        </ListItem>\n\n        <ListItem>\n          <Typography varient=\"body2\">\n            A primitive type always has a value, whereas non-primitive types can\n            be null. A primitive type starts with a lowercase letter, while\n            non-primitive types start with an uppercase letter. The size of a\n            primitive type depends on the data type, while non-primitive types\n            have all the same size.\n          </Typography>\n        </ListItem>\n      </List>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.handleButton}\n        onClick={e => {\n          handleSubmit(e, props);\n        }}\n      >\n        Next\n      </Button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport {\n  Typography,\n  makeStyles,\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Button,\n  List,\n  ListItem,\n  Container\n} from \"@material-ui/core\";\nimport learningStyles from \"../../../Data/learningStyles\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  },\n  Text: {\n    display: \"block\"\n  }\n}));\n\nconst handleSubmit = async (e, props) => {\n  e.preventDefault();\n\n  const category = props.match.params.category;\n\n  const lsType = props.match.params.ls_type;\n\n  const course = props.match.params.course;\n\n  const lsContents = learningStyles.find(style => lsType === style.type)\n    .contents;\n\n  const path =\n    lsContents.indexOf(category) + 1 < lsContents.length\n      ? `/course/${course}/ls/${lsType}/${\n          lsContents[lsContents.indexOf(category) + 1]\n        }`\n      : `/course/${course}/home`;\n\n  props.history.push(path);\n};\n\nexport default function SummaryVisual(props) {\n  const classes = useStyles();\n  return (\n    <Container maxWidth=\"sm\">\n      <form autoComplete=\"off\" noValidate>\n        <List>\n          <ListItem>\n            <Typography variant=\"h2\">Data Types in Java</Typography>\n          </ListItem>\n          <ListItem>\n            <Card className={classes.root}>\n              <CardActionArea>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  // height=\"250\"\n                  image=\"https://i1.wp.com/www.guffo.in/wp-content/uploads/2018/03/3.png?ssl=1\"\n                  title=\"Variables\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Java Data Types\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    The Above Diagram Shows the summary of Java Data Types\n                  </Typography>\n                </CardContent>\n              </CardActionArea>\n            </Card>\n          </ListItem>\n        </List>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.handleButton}\n          onClick={e => {\n            handleSubmit(e, props);\n          }}\n        >\n          Next\n        </Button>\n      </form>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport courses from \"../../Data/courses\";\nimport {\n  Typography,\n  makeStyles,\n  AppBar,\n  CardContent,\n  Card,\n  Toolbar,\n  IconButton,\n  Container\n} from \"@material-ui/core\";\n\nimport categories from \"../../Data/categories\";\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2)\n  },\n  handleButton: {\n    margin: theme.spacing(4),\n    float: \"right\"\n  },\n  link: {\n    textDecoration: \"none\"\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6)\n  },\n  heroButtons: {\n    margin: theme.spacing(4)\n  },\n  title: {\n    flexGrow: 1\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8)\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cardMedia: {\n    paddingTop: \"56.25%\" // 16:9\n  },\n  cardContent: {\n    flexGrow: 1\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6)\n  }\n}));\n\nexport default function Page(props) {\n  const classes = useStyles();\n\n  const course = courses.find(\n    course => props.match.params.course === course.name\n  );\n  const category = categories.find(\n    category => props.match.params.category === category.name\n  );\n\n  return (\n    <div>\n      {course ? (\n        <React.Fragment>\n          <AppBar position=\"relative\">\n            <Toolbar>\n              <Typography\n                variant=\"h6\"\n                className={classes.title}\n                color=\"inherit\"\n                noWrap\n              >\n                {course.name + \" \" + category.name}\n              </Typography>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"home\"\n                onClick={e => {\n                  e.preventDefault();\n                  props.history.push(\"/course/\" + course.name + \"/home\");\n                }}\n              >\n                <Typography gutterBottom variant=\"body1\">\n                  Course Home\n                </Typography>\n              </IconButton>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"home\"\n                onClick={e => {\n                  e.preventDefault();\n                  sessionStorage.clear();\n                  props.history.push(\"/\");\n                }}\n              >\n                <Typography gutterBottom variant=\"body1\">\n                  Log Out\n                </Typography>\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n          <Card className={classes.card}>\n            <Container maxWidth=\"md\">\n              <CardContent className={classes.cardContent}>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  {category.name}\n                </Typography>\n                {<category.component {...props} />}\n                <br />\n              </CardContent>\n            </Container>\n          </Card>\n        </React.Fragment>\n      ) : (\n        <h1> 404 Error </h1>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport axios from \"axios\";\nimport { Link as Linkto } from \"react-router-dom\";\nimport SignUp from \"./Signup\";\nimport {\n  Container,\n  Avatar,\n  makeStyles,\n  Typography,\n  Grid,\n  Box,\n  Paper,\n  Link,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  CssBaseline,\n  Button\n} from \"@material-ui/core\";\n\nfunction Copyright() {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Linkto to=\"/\" className={classes.link}>\n        Chill Studies\n      </Linkto>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100vh\"\n  },\n  link: {\n    textDecoration: \"none\",\n    marginTop: \"5px%\"\n  },\n  image: {\n    backgroundImage:\n      \"url(https://images.unsplash.com/photo-1503676260728-1c00da094a0b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[900]\n        : theme.palette.grey[50],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\"\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nasync function handleClick(e, props) {\n  e.preventDefault();\n  const email = document.getElementById(\"email\").value;\n  const password = document.getElementById(\"password\").value;\n\n  try {\n    const res = await axios.post(\"http://127.0.0.1:8000/api/v1/student/login\", {\n      studentId: email,\n      password: password\n    });\n\n    if (res.status === 201) {\n      sessionStorage.setItem(\"auth\", res.data.data.student._id);\n      props.history.push(\"/dashboard\");\n    } else {\n      alert(\"Pls Enter Valid Details\");\n    }\n  } catch (err) {\n    alert(err);\n  }\n}\n\nexport default function Login(props) {\n  const classes = useStyles();\n\n  const [signIn, setSingIn] = React.useState(true);\n\n  const handleSignup = () => {\n    signIn ? setSingIn(false) : setSingIn(true);\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper}>\n        {signIn ? (\n          <Container component=\"main\" maxWidth=\"sm\">\n            <CssBaseline />\n            <div className={classes.paper}>\n              <Avatar className={classes.avatar}>\n                <LockOutlinedIcon />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Sign in\n              </Typography>\n              <form className={classes.form} noValidate>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  autoFocus\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"current-password\"\n                />\n                <FormControlLabel\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\n                  label=\"Remember me\"\n                />\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                  onClick={e => {\n                    handleClick(e, props);\n                  }}\n                >\n                  Sign In\n                </Button>\n                {/* <Linkto className={classes.link} to=\"/signup\"> */}\n                <Button\n                  fullWidth\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  className={classes.submit}\n                  onClick={e => {\n                    e.preventDefault();\n                    handleSignup();\n                  }}\n                >\n                  Sign Up\n                </Button>\n                {/* </Linkto> */}\n                <Grid container>\n                  <Grid item xs>\n                    <Link href=\"#\" variant=\"body2\">\n                      Forgot password?\n                    </Link>\n                  </Grid>\n                  <Grid item>\n                    <Link href=\"#\" variant=\"body2\">\n                      {\"Don't have an account? Sign Up\"}\n                    </Link>\n                  </Grid>\n                </Grid>\n                <Box mt={5}>\n                  <Copyright />\n                </Box>\n              </form>\n            </div>\n          </Container>\n        ) : (\n          <SignUp handleSignup={handleSignup} />\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport {\n  makeStyles,\n  Typography,\n  Box,\n  Grid,\n  Link,\n  Checkbox,\n  FormControlLabel,\n  CssBaseline,\n  TextField,\n  Button,\n  Avatar\n} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport { Link as Linkto } from \"react-router-dom\";\n\nfunction Copyright() {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\">\n        <Linkto to=\"/\" className={classes.link}>\n          Chill Studies\n        </Linkto>\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n}));\n\nasync function handleClick(e, props) {\n  e.preventDefault();\n\n  const name = document.getElementById(\"name\").value,\n    email = document.getElementById(\"email\").value,\n    password = document.getElementById(\"password\").value,\n    confirmPassword = document.getElementById(\"confirmPassword\").value;\n\n  if (\n    name === \"\" ||\n    email === \"\" ||\n    password === \"\" ||\n    confirmPassword === \"\"\n  ) {\n    alert(\"Provide Valid Informations\");\n  } else {\n    const data = {\n      name: name,\n      studentId: email,\n      password: password,\n      passwordConfrim: confirmPassword\n    };\n    try {\n      const res = await axios.post(\n        \"http://127.0.0.1:8000/api/v1/student/signup\",\n        data\n      );\n      if (res.status === 201) {\n        alert(\"You Successfully Signed Up !!! \\n Now Sign In To Continue\");\n      }\n    } catch (err) {\n      alert(err);\n      console.log(err);\n    }\n    props.handleSignup();\n  }\n}\n\nexport default function SignUp(props) {\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign Up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"name\"\n            label=\"Name\"\n            name=\"name\"\n            autoComplete=\"name\"\n            autoFocus\n            required\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"confirmPassword\"\n            label=\"Confirm Password\"\n            type=\"password\"\n            id=\"confirmPassword\"\n            autoComplete=\"current-password\"\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={e => handleClick(e, props)}\n          >\n            Sign Up\n          </Button>\n          <Button\n            fullWidth\n            variant=\"outlined\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={e => {\n              props.handleSignup();\n            }}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\n// Create a theme instance.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\"\n    },\n    secondary: {\n      main: \"#19857b\"\n    },\n    error: {\n      main: red.A400\n    },\n    background: {\n      default: \"#fff\"\n    }\n  }\n});\n\nexport default theme;\n","import Activity from \"../Components/Course/GeneralMaterials/Activity\";\nimport Content from \"../Components/Course/GeneralMaterials/Content\";\nimport Definitions from \"../Components/Course/GeneralMaterials/Definitions\";\nimport Summary from \"../Components/Course/GeneralMaterials/Summary\";\nimport Visual from \"../Components/Course/GeneralMaterials/Visual\";\nimport Overview from \"../Components/Course/GeneralMaterials/Overview\";\nimport ActivityVisual from \"../Components/Course/LSMaterials/ActivityVisual\";\nimport AcivityVerbal from \"../Components/Course/LSMaterials/AcivityVerbal\";\nimport ContentVerbalDetailed from \"../Components/Course/LSMaterials/ContentVerbalOverview\";\nimport ContentVerbalOverview from \"../Components/Course/LSMaterials/ContentVerbalDetailed\";\nimport ContentVisualDetailed from \"../Components/Course/LSMaterials/ContentVisualDetailed\";\nimport ContentVisualOverview from \"../Components/Course/LSMaterials/ContentVisualOverview\";\nimport DefinitionVerbalDetailed from \"../Components/Course/LSMaterials/DefinitionVerbalDetailed\";\nimport DefinitionVerbalOverview from \"../Components/Course/LSMaterials/DefinitionVerbalOverview\";\nimport DefinitionVisualOverview from \"../Components/Course/LSMaterials/DefinitionVisualOverview\";\nimport DefinitionVisualDetailed from \"../Components/Course/LSMaterials/DefinitionVisualDetailed\";\nimport OverviewVerbal from \"../Components/Course/LSMaterials/OverviewVerbal\";\nimport OverviewVisual from \"../Components/Course/LSMaterials/OverviewVisual\";\nimport SummaryVerbal from \"../Components/Course/LSMaterials/SummaryVerbal\";\nimport SummaryVisual from \"../Components/Course/LSMaterials/SummaryVisual\";\n\nconst categories = [\n  {\n    name: \"Activity\",\n    component: Activity\n  },\n  {\n    name: \"Content\",\n    component: Content\n  },\n  {\n    name: \"Definitons\",\n    component: Definitions\n  },\n  {\n    name: \"Summary\",\n    component: Summary\n  },\n  {\n    name: \"Visual\",\n    component: Visual\n  },\n  {\n    name: \"Overview\",\n    component: Overview\n  },\n  {\n    name: \"Overview-Verbal\",\n    component: OverviewVerbal\n  },\n  {\n    name: \"Overview-Visual\",\n    component: OverviewVisual\n  },\n  {\n    name: \"Summary-Visual\",\n    component: SummaryVisual\n  },\n  {\n    name: \"Summary-Verbal\",\n    component: SummaryVerbal\n  },\n  {\n    name: \"Activity-Verbal\",\n    component: AcivityVerbal\n  },\n  {\n    name: \"Activity-Visual\",\n    component: ActivityVisual\n  },\n  {\n    name: \"Content-Verbal-Detailed\",\n    component: ContentVerbalDetailed\n  },\n  {\n    name: \"Content-Verbal-Overview\",\n    component: ContentVerbalOverview\n  },\n  {\n    name: \"Content-Visual-Detailed\",\n    component: ContentVisualDetailed\n  },\n  {\n    name: \"Content-Visual-Overview\",\n    component: ContentVisualOverview\n  },\n  {\n    name: \"Definition-Verbal-Detailed\",\n    component: DefinitionVerbalDetailed\n  },\n  {\n    name: \"Definition-Verbal-Overview\",\n    component: DefinitionVerbalOverview\n  },\n  {\n    name: \"Definition-Visual-Detailed\",\n    component: DefinitionVisualDetailed\n  },\n  {\n    name: \"Definition-Visual-Overview\",\n    component: DefinitionVisualOverview\n  },\n  {\n    name: \"Summary-Verbal\",\n    component: SummaryVerbal\n  },\n  {\n    name: \"Summary-Visual\",\n    component: SummaryVisual\n  }\n];\n\nexport default categories;\n","const courses = [\n  {\n    name: \"Java\",\n    image:\n      \"https://c4.wallpaperflare.com/wallpaper/510/989/208/web-development-development-java-wallpaper-preview.jpg\",\n    desc: \"Java Beginner Pack\"\n  },\n  {\n    name: \"JavaScript\",\n    image:\n      \"https://i1.wp.com/www.nishantvaity.com/wp-content/uploads/2019/05/javascript.jpg?fit=650%2C400&ssl=1\",\n    desc: \"JavaScript Beginner Pack\"\n  },\n  {\n    name: \"HTML\",\n    image: \"https://dinesh-ghimire.com.np/wp-content/uploads/2019/02/html5.png\",\n    desc: \"HTML Beginner Pack\"\n  },\n  {\n    name: \"CSS\",\n    image:\n      \"https://colorlib.com/wp/wp-content/uploads/sites/2/creative-css3-tutorials.jpg\",\n    desc: \"CSS Beginner Pack\"\n  },\n  {\n    name: \"ReactJs\",\n    image:\n      \"https://embedwistia-a.akamaihd.net/deliveries/bdfbccc31132d5f0a48bbf0caacced1e.webp?image_crop_resized=1280x800\",\n    desc: \"ReactJs Beginner Pack\"\n  },\n  {\n    name: \"NodeJs\",\n    image:\n      \"https://cdnblog.natrocdn.com/wp-content/uploads/2019/10/node-js-nedir-768x427.jpg\",\n    desc: \"NodeJs Beginner Pack\"\n  }\n];\n\nexport default courses;\n","export default [\n  {\n    type: \"rirs\",\n    name: \"Reflective Intuitive Reading Sequential\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Content-Verbal-Detailed\",\n      \"Summary-Verbal\",\n      \"Activity-Verbal\"\n    ]\n  },\n  {\n    type: \"rsrs\",\n    name: \"Reflective Sensing Reading Sequential\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Definition-Verbal-Detailed\",\n      \"Summary-Verbal\",\n      \"Activity-Verbal\"\n    ]\n  },\n  {\n    type: \"rivs\",\n    name: \"Reflective Intuitive Visual Sequential\",\n    contents: [\n      \"Overview-Visual\",\n      \"Content-Visual-Detailed\",\n      \"Summary-Visual\",\n      \"Activity-Visual\"\n    ]\n  },\n  {\n    type: \"rsvs\",\n    name: \"Reflective Sensing Visual Sequential\",\n    contents: [\n      \"Overview-Visual\",\n      \"Content-Visual-Detailed\",\n      \"Summary-Visual\",\n      \"Activity-Visual\"\n    ]\n  },\n  {\n    type: \"rirg\",\n    name: \"Reflective Intuitive Reading Global\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Definition-Verbal-Overview\",\n      \"Summary-Verbal\",\n      \"Activity-Verbal\"\n    ]\n  },\n  {\n    type: \"rsrg\",\n    name: \"Reflective Sensing Reading Global\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Definition-Verbal-Overview\",\n      \"Summary-Verbal\",\n      \"Activity-Verbal\"\n    ]\n  },\n  {\n    type: \"rivg\",\n    name: \"Reflective  Intuitive  Visual Global\",\n    contents: [\n      \"Overview-Visual\",\n      \"Content-Visual-Overview\",\n      \"Summary-Visual\",\n      \"Activity-Visual\"\n    ]\n  },\n  {\n    type: \"rsvg\",\n    name: \"Reflective Sensing Visual Global\",\n    contents: [\n      \"Overview-Visual\",\n      \"Definition-Visual-Overview\",\n      \"Summary-Visual\",\n      \"Activity-Visual\"\n    ]\n  },\n  {\n    type: \"asrs\",\n    name: \"Active Sensing Reading Sequential\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Definition-Verbal-Detailed\",\n      \"Activity-Verbal\",\n      \"Summary-Verbal\"\n    ]\n  },\n  {\n    type: \"airg\",\n    name: \"Active Intuitive Reading Global\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Content-Verbal-Overview\",\n      \"Activity-Verbal\",\n      \"Summary-Verbal\"\n    ]\n  },\n  {\n    type: \"airs\",\n    name: \"Active Intuitive Reading Sequential\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Content-Verbal-Detailed\",\n      \"Activity-Verbal\",\n      \"Summary-Verbal\"\n    ]\n  },\n  {\n    type: \"asrg\",\n    name: \"Active Sensing Reading Global\",\n    contents: [\n      \"Overview-Verbal\",\n      \"Definition-Verbal-Overview\",\n      \"Activity-Verbal\",\n      \"Summary-Verbal\"\n    ]\n  },\n\n  {\n    type: \"aivg\",\n    name: \"Active Intuitive Visual Global\",\n    contents: [\n      \"Overview-Visual\",\n      \"Definition-Visual-Overview\",\n      \"Activity-Visual\",\n      \"Summary-Visual\"\n    ]\n  },\n  {\n    type: \"aivs\",\n    name: \"Active Intuitive Visual Sequential\",\n    contents: [\n      \"Overview-Visual\",\n      \"Definition-Visual-Detailed\",\n      \"Activity-Visual\",\n      \"Summary-Visual\"\n    ]\n  },\n  {\n    type: \"asvg\",\n    name: \"Active Sensing Visual Global\",\n    contents: [\n      \"Overview-Visual\",\n      \"Content-Visual-Overview\",\n      \"Activity-Visual\",\n      \"Summary-Visual\"\n    ]\n  },\n  {\n    type: \"asvs\",\n    name: \"Active Sensing Visual Sequential\",\n    contents: [\n      \"Overview-Visual\",\n      \"Content-Visual-Detailed\",\n      \"Activity-Visual\",\n      \"Summary-Visual\"\n    ]\n  }\n];\n","import Login from \"../Components/Login\";\nimport Signup from \"../Components/Signup\";\nimport Home from \"../Components/Course/Home\";\nimport Page from \"../Components/Course/Page\";\nimport LS from \"../Components/Course/LS/LS\";\n\nconst routes = [\n  {\n    path: \"/\",\n    component: Login,\n    exact: true\n  },\n  {\n    path: \"/signup\",\n    component: Signup,\n    exact: true\n  },\n  {\n    path: \"/course/:course/ls:ls_type\",\n    component: LS,\n    exact: true\n  },\n  {\n    path: \"/course/:course/home\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/course/:course/ls/:ls_type\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/course/:course/ls/:ls_type/:category\",\n    component: Page,\n    exact: true\n  },\n  {\n    path: \"/dashboard\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/course/:course\",\n    component: Home,\n    exact: true\n  },\n  {\n    path: \"/course/:course/:category\",\n    component: Page,\n    exact: true\n  }\n];\n\nexport default routes;\n","import express from \"express\";\nconst cors = require(\"cors\");\nconst morgan = require(\"morgan\");\nconst globalErrorHandler = require(\"./APIs/Controllers/ErrorController\");\nconst AppErr = require(\"./APIs/utils/appError\");\nconst studentRouter = require(\"./APIs/Routers/studentRouter\");\n\nimport Router from \"./React/Server/index\";\n\nconst app = express();\napp.use(express.json());\napp.use(morgan(\"dev\"));\napp.use(cors());\n\n//===============Routers=====================\napp.use(\"/api/v1/student\", studentRouter);\n\napp.use(\"/\", Router);\n\napp.all(\"*\", (req, res, next) => {\n  next(new AppErr(\"Can't find a route - BAD URL\", 404));\n});\n\napp.use(globalErrorHandler);\n\nexport default app;\n","const KNN = require(\"ml-knn\");\nconst fs = require(\"fs\");\n\nfunction csvJSON(csv) {\n  var lines = csv.split(\"\\n\");\n\n  var result = [];\n\n  var headers = lines[0].trim().split(\",\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].trim().split(\",\");\n\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n\n    result.push(obj);\n  }\n\n  //return result; //JavaScript object\n  return JSON.parse(JSON.stringify(result)); //JSON\n}\n\nexports.getType = input => {\n  let knn;\n  let type;\n  const csvFilePath = __dirname + \"/../knn/dataset.csv\"; // Data\n  const names = [\n    \"ABC_%\",\n    \"D_%\",\n    \"C_%\",\n    \"AAC_%\",\n    \"A_%\",\n    \"V_%\",\n    \"ABC_T\",\n    \"D_T\",\n    \"C_T\",\n    \"AAC_T\",\n    \"A_T\",\n    \"LS\"\n  ];\n  let data = [],\n    X = [],\n    Y = [];\n\n  const csv = fs.readFileSync(csvFilePath, \"utf-8\");\n\n  data = csvJSON(csv);\n\n  let types = new Set();\n\n  data.forEach(row => {\n    if (row.LS === undefined) console.log(row);\n    types.add(row.LS);\n  });\n\n  typesArray = [...types];\n\n  // console.log(typesArray)\n\n  data.forEach(row => {\n    let rowArray, typeNumber;\n\n    rowArray = Object.values(row)\n      .map(key => parseFloat(key))\n      .slice(0, 11);\n\n    // typeNumber = typesArray.indexOf(row.LS);\n\n    type = row.LS;\n\n    X.push(rowArray);\n    Y.push(type);\n  });\n\n  knn = new KNN(X, Y, { k: 1 });\n\n  type = knn.predict(input);\n\n  return type;\n};\n","import app from \"./app\";\nconst dotenv = require(\"dotenv\");\nconst mongoose = require(\"mongoose\");\ndotenv.config({ path: \"./config.env\" });\n\nconst DB = process.env.DB_CON.replace(\"<password>\", process.env.DB_PASS);\n\nconsole.log(DB);\n\nmongoose\n  .connect(DB, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useFindAndModify: false,\n    useUnifiedTopology: true\n  })\n  .then(() => {\n    console.log(\"Database connection Done !\");\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\nconst port = process.env.CON_PORT;\n\napp.listen(port, () => {\n  console.log(`Server Started at http://localhost:8000`);\n});\n","module.exports = require(\"@material-ui/core\");","module.exports = require(\"@material-ui/core/Container\");","module.exports = require(\"@material-ui/core/colors\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"@material-ui/icons/ArrowForwardIosRounded\");","module.exports = require(\"@material-ui/icons/CheckCircleSharp\");","module.exports = require(\"@material-ui/icons/KeyboardArrowRightOutlined\");","module.exports = require(\"@material-ui/icons/LockOutlined\");","module.exports = require(\"axios\");","module.exports = require(\"bcrypt\");","module.exports = require(\"cors\");","module.exports = require(\"crypto\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"ml-knn\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"nodemailer\");","module.exports = require(\"path\");","module.exports = require(\"react\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-router-dom\");","module.exports = require(\"serialize-javascript\");","module.exports = require(\"util\");","module.exports = require(\"validator\");"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;ACRA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AALA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAiBA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAAA;AAAA;AAAA;AAqCA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAvCA;AAAA;AAAA;AAAA;AAwCA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AA8BA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AC1KA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AA/BA;AAAA;AAAA;AAAA;AAgCA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AARA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAnDA;AAzCA;AAoGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAIA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACnJA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;;;;;;;;;;AClBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAVA;AACA;AAWA;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAJA;AACA;AAUA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAQA;AAEA;AAAA;AAAA;AACA;AAqBA;AAEA;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAKA;AACA;AAZA;AACA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA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;;;;;;;;;;;;AC1SA;AACA;AAUA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AArCA;AACA;AAyCA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AACA;AA+BA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAMA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAMA;AAAA;AAOA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAdA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;ACjPA;AACA;AAUA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AArCA;AACA;AAyCA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAlDA;AAAA;AAAA;AAAA;AACA;AAkDA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAAA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAWA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAdA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;AChQA;AACA;AAcA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAjCA;AACA;AAsCA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAAA;AACA;AAiCA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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AACA;AAHA;AAcA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AApCA;AA0CA;AACA;AAEA;AAGA;AAIA;AAIA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AADA;AAjCA;AACA;AAqCA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAOA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpMA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAFA;AAIA;AACA;AADA;AAfA;AACA;AAmBA;;;;;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAOA;AAAA;AAKA;;;;;;;;;;;;ACjMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC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","sourceRoot":""}